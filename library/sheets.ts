import { GoogleSpreadsheet } from "google-spreadsheet";
import slugify from "react-slugify";
import { AppContextInterface, Keyboard, KeyboardsObject } from "../types/index";

export async function getKeyboardData(): Promise<AppContextInterface> {
  const nullResult = { header: [], data: {} };
  if (!process.env.GOOGLE_SHEETS_CLIENT_EMAIL) return nullResult;

  try {
    // Initialize the sheet - doc ID is the long id in the sheets URL
    const doc = new GoogleSpreadsheet(process.env.SPREADSHEET_ID);

    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
      // env var values are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      client_email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL!,
      private_key: (process.env.GOOGLE_SHEETS_PRIVATE_KEY || "").replace(
        /\\n/g,
        "\n"
      ),
    });

    await doc.loadInfo(); // loads document properties and worksheets

    const sheet = doc.sheetsByTitle["database"];

    // read rows
    const rows = await sheet.getRows(); // can pass in { limit, offset }

    // convert raw data
    const keyboardsObj: KeyboardsObject = {};
    rows.forEach((row) => {
      const kb: Keyboard = {
        name: row["Name"],
        keys: row["Keys"],
        material: row["Material"],
        knob: row["Knob"],
        wirelessConnection: row["Wireless Connection"],
        bluetoothConnection: row["Bluetooth Connection"],
        wiredConnection: row["Wired Connection"],
        hotSwapAble: row["Hot-swappable"],
        switch: row["Switch"],
        keyCaps: row["Keycaps"],
        antiGhosting: row["Anti-Ghosting"],
        rgb: row["RGB"],
        battery: row["Battery"],
        keyCapsPuller: row["Keycaps Puller"],
        switchPuller: row["Switch Puller"],
        software: row["Software"],
        stabilizer: row["Stabilizer"],
        warranty: row["Warranty"],
        prices: row["Prices"],
        imageUrl: row["Image"],
        slug: slugify(row["Name"]),
      };

      keyboardsObj[kb.slug!] = kb;
    });

    return {
      header: sheet.headerValues,
      data: keyboardsObj,
    };
  } catch (error) {
    console.error(error);
    return nullResult;
  }
}
