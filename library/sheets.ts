import {
  GoogleSpreadsheet,
  GoogleSpreadsheetWorksheet,
} from "google-spreadsheet";
import slugify from "react-slugify";
import {
  KeyboardSheetData,
  Keyboard,
  KeyboardLooseObjects,
} from "../types/index";

export class MechanicalKeyboards {
  private sheet?: GoogleSpreadsheetWorksheet;

  public async initSheetByTitle(sheetTitle: string) {
    try {
      const doc = new GoogleSpreadsheet(process.env.SPREADSHEET_ID);

      await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL!,
        private_key: (process.env.GOOGLE_SHEETS_PRIVATE_KEY || "").replace(
          /\\n/g,
          "\n"
        ),
      });

      await doc.loadInfo(); // loads document properties and worksheets

      this.sheet = doc.sheetsByTitle[sheetTitle];
    } catch (error) {
      console.error(error);
      throw new Error("Unable to init sheet");
    }
  }

  public async appendRow(data: Keyboard) {
    if (!this.sheet) return;

    const appendedData = await this.sheet.addRow(data);
    return appendedData;
  }

  public async getRows(): Promise<KeyboardSheetData> {
    if (!this.sheet) return { header: [], data: {} };

    // read rows
    const rows = await this.sheet.getRows(); // can pass in { limit, offset }

    // convert raw data
    const keyboardsObj: KeyboardLooseObjects = {};
    rows.forEach((row) => {
      const kb: Keyboard = {
        name: row["Name"],
        keys: row["Keys"],
        material: row["Material"],
        knob: row["Knob"],
        wirelessConnection: row["Wireless Connection"],
        bluetoothConnection: row["Bluetooth Connection"],
        wiredConnection: row["Wired Connection"],
        hotSwapAble: row["Hot-swappable"],
        switch: row["Switch"],
        keyCaps: row["Keycaps"],
        antiGhosting: row["Anti-Ghosting"],
        rgb: row["RGB"],
        battery: row["Battery"],
        keyCapsPuller: row["Keycaps Puller"],
        switchPuller: row["Switch Puller"],
        software: row["Software"],
        stabilizer: row["Stabilizer"],
        warranty: row["Warranty"],
        prices: row["Prices"],
        imageUrl: row["Image"],
        slug: slugify(row["Name"]),
      };

      keyboardsObj[kb.slug!] = kb;
    });

    return {
      header: this.sheet.headerValues,
      data: keyboardsObj,
    };
  }
}
